<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\SkyHub\Model\Transformer\Sales\Order;

use B2W\SkyHub\Helper\App;
use B2W\SkyHub\Model\Sales\Order\Entity;
use B2W\SkyHub\Model\Sales\Order\Map;
use B2W\SkyHub\Model\TransformerAbstract;

/**
 * Class Post
 * @package B2W\SkyHub\Model\Transformer\Sales\Order
 */
class Post extends TransformerAbstract
{
    /**
     * @var array
     */
    protected $_data = array();

    /**
     * @param Entity $order
     * @return array
     */
    static public function convert(Entity $order)
    {
        /** @var static $instance */
        $instance = static::_instantiate();
        $instance->_convert($order);
        $data = $instance->_data;
        $instance->_data = array();
        return $data;
    }

    /**
     * @param Entity $order
     * @return array
     * @throws \B2W\SkyHub\Exception\Helper\HelperNotFound
     */
    protected function _convert(Entity $order)
    {
        $map    = new Map();

        /** @var App $helper */
        $helper = \App::helper('app');
        $data   = array();

        foreach ($map->map() as $attribute) {

            $method = $helper->getGetterMethodName($order, $attribute['skyhub']);

            if (isset($attribute['mapper'])) {
                $value = $method ? $order->$method() : $order;
                $this->_fromModel($value, $attribute['mapper']);
                continue;
            }

            //for non mapper, need method
            if (!$method) {
                continue;
            }

            $value = empty($method) ? $order : $order->$method();

            $this->_setData($value, $attribute);
        }

        return $data;
    }

    /**
     * @param $value
     * @param $attribute
     * @return $this|Post
     */
    protected function _setData($value, $attribute)
    {
        if (is_object($value)) {
            $value = $this->_toString($value);
        }

        if (is_array($value)) {
            $value = current($value);
        }

        if (strpos($attribute['local'], '_') === 0) {
            $this->_data['meta_input'][$attribute['local']] = $value;
            return $this;
        }

        $this->_data[$attribute['local']] = $value;

        return $this;
    }

    /**
     * @param $value
     * @param $mapper
     * @return $this
     */
    protected function _fromModel($value, $mapper)
    {
        if (!isset($mapper['entity_to_post']) || empty($mapper['entity_to_post'])) {
            return $this;
        }

        $model          = $mapper['entity_to_post'];
        $this->_data    = array_merge_recursive($this->_data, $model::convert($value));

        return $value;
    }
}
