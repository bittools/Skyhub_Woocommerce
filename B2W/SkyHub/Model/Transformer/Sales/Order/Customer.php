<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\SkyHub\Model\Transformer\Sales\Order;

use B2W\SkyHub\Contracts\Sales\Order\Entity as orderEntity;
use B2W\SkyHub\Contracts\Sales\Order\Customer\Entity as customerEntity;
use B2W\SkyHub\Model\Transformer\ToCustomerAbstract;

/**
 * Class Customer
 * @package B2W\SkyHub\Model\Transformer\Sales\Order
 */
class Customer extends ToCustomerAbstract
{
    /**
     * @var string
     */
    protected $_entity      = 'sales/order';
    /**
     * @var null
     */
    protected $_order       = null;
    /**
     * @var array
     */
    protected $_orderMeta   = array();

    /**
     * @param orderEntity $order
     * @param customerEntity $customer
     * @return Customer
     * @throws \B2W\SkyHub\Exception\Helper\HelperNotFound
     */
    public static function convert(orderEntity $order, customerEntity $customer)
    {
        /** @var Customer $instance */
        $instance = static::_instantiate();

        $instance->setCustomer($customer);
        $instance->setOrder($order);
        $instance->_convert();

        return $instance;
    }

    /**
     * @param orderEntity $order
     * @return $this
     */
    public function setOrder(orderEntity $order)
    {
        $this->_order = $order;
        return $this;
    }

    /**
     * @return \B2W\SkyHub\Contracts\Sales\Order\Entity
     */
    public function getOrder()
    {
        return $this->_order;
    }

    /**
     * @param $localAttr
     * @return array|mixed|string
     */
    protected function _getEntityData($localAttr)
    {
        $id = $this->getOrder()->getId();

        if (!isset($this->_orderMeta[$id])) {
            $meta                   = get_post_meta($id);
            $this->_orderMeta[$id]  = array();

            foreach ($meta as $attribute => $value) {
                $this->_orderMeta[$id][$attribute] = current($value);
            }
        }

        if (empty($localAttr)) {
            return isset($this->_orderMeta[$id]) ? $this->_orderMeta[$id] : array();
        }

        return isset($this->_orderMeta[$id]) && isset($this->_orderMeta[$id][$localAttr])
            ? $this->_orderMeta[$id][$localAttr]
            : '';
    }
}
