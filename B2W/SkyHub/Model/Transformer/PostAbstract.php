<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\SkyHub\Model\Transformer;

use B2W\SkyHub\Helper\App;

/**
 * Class PostAbstract
 * @package B2W\SkyHub\Model\Transformer
 */
abstract class PostAbstract
{
    /**
     * @var array
     */
    protected $_map = array();

    /**
     * @param $post
     * @param $entity
     * @return PostAbstract|bool
     */
    public static function convert($post, $entity)
    {
        static $instance = false;
        if ($instance === false) {
            $instance = new static();
        }

        $instance->_init();
        $instance->_convert($post, $entity);

        return $instance;
    }

    /**
     * PostAbstract constructor.
     */
    private function __construct()
    {
        return $this;
    }

    /**
     * @return $this
     */
    private function __clone()
    {
        return $this;
    }

    /**
     * @return mixed
     */
    abstract protected function _init();

    /**
     * @param $postAttribute
     * @param $entityAttribute
     * @return $this
     */
    protected function _addMap($postAttribute, $entityAttribute)
    {
        $this->_map[] = array(
            'local'     => $postAttribute,
            'skyhub'    => $entityAttribute
        );
        return $this;
    }

    /**
     * @param $post
     * @param $entity
     * @return $this
     * @throws \B2W\SkyHub\Exception\Helper\HelperNotFound
     */
    protected function _convert($post, $entity)
    {
        $meta =  get_post_meta($post->ID);
        /** @var App $helper */
        $helper = \App::helper('app');

        foreach ($this->_map as $map) {

            $postAttribute      = $map['local'];
            $entityAttribute    = $map['skyhub'];

            if (empty($postAttribute) || is_array($postAttribute)) {
                continue;
            }

            $method = $helper->getSetterMethodName($entity, $entityAttribute);
            $value  = property_exists($post, $postAttribute)
                ? $post->$postAttribute
                : (key_exists($postAttribute, $meta) ? current($meta[$postAttribute]) : null);

            if (!$value) {
                continue;
            }

            if (!$method) {
                $this->_tryAdditional($entity, $entityAttribute, $value);
                continue;
            }

            $entity->$method($value);
        }

        //SET ADDITIONAL DATA
        if (method_exists($entity, 'setAdditionalData')) {
            foreach ($post->to_array() as $key => $value) {
                if (isset($this->_map[$key])) {
                    continue;
                }

                $entity->setAdditionalData($key, $value);
            }
        }

        $this->_afterConvert($post, $entity);

        return $this;
    }

    /**
     * @param $post
     * @param $entity
     * @return $this
     */
    protected function _afterConvert($post, $entity)
    {
        return $this;
    }

    /**
     * @param $entity
     * @param $attribute
     * @param $value
     * @return $this
     */
    protected function _tryAdditional($entity, $attribute, $value)
    {
        if (method_exists($entity, 'setAdditional')) {
            $entity->setAdditional($attribute, $value);
        }

        return $this;
    }
}
