<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\SkyHub\Model\Transformer\Api\Sales;

use B2W\SkyHub\Helper\App;
use B2W\SkyHub\Model\TransformerAbstract;

/**
 * Class EntityAbstract
 * @package B2W\SkyHub\Model\Transformer\Api\Sales
 */
abstract class EntityAbstract extends TransformerAbstract
{
    /**
     * @var null
     */
    protected $_entity  = null;
    /**
     * @var array
     */
    protected $_map     = array();
    /**
     * @var null
     */
    protected $_result  = null;

    /**
     * @return mixed
     */
    public function getEntity()
    {
        return $this->_entity;
    }

    /**
     * @return mixed
     */
    abstract protected function _getEntityInstance();

    /**
     * @param $value
     * @return $this
     */
    static public function convert($value)
    {
        /** @var static $instance */
        $instance = static::_instantiate();
        $instance->_entity = $instance->_getEntityInstance();
        $instance->_convert($value);

        return $instance->getEntity();
    }

    /**
     * @param array $data
     * @return $this
     * @throws \B2W\SkyHub\Exception\Helper\HelperNotFound
     */
    protected function _convert(array $data)
    {
        /** @var App $helper */
        $helper = \App::helper('app');

        foreach ($data as $attr => $value) {
            $method = $helper->getSetterMethodName($this->getEntity(), $attr);
            $value  = $this->_getValue($attr, $value, $data);

            if ($method) {
                $this->getEntity()->$method($value);
            }

            $this->_afterSetValue($this->getEntity(), $attr, $value, $data);
        }

        return $this;
    }

    /**
     * @param $attr
     * @param $value
     * @return mixed
     */
    protected function _getValue($attr, $value)
    {
        if (isset($this->_map[$attr])) {
            $class = $this->_map[$attr];
            /** @var EntityAbstract $transformer */
            $object = $class::convert($value);
            return $object;
        }

        return $value;
    }

    /**
     * @param $entity
     * @param $attr
     * @param $value
     * @return $this
     */
    protected function _afterSetValue($entity, $attr, $value, $data)
    {
        return $this;
    }
}
