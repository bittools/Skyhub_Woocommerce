<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\SkyHub\Model\Transformer\Api\Sales;

use B2W\SkyHub\Model\Sales\Order\Entity;
use B2W\SkyHub\Model\Transformer\Api\Sales\Order\Address;
use B2W\SkyHub\Model\Transformer\Api\Sales\Order\Customer;
use B2W\SkyHub\Model\Transformer\Api\Sales\Order\Invoice;
use B2W\SkyHub\Model\Transformer\Api\Sales\Order\Item;
use B2W\SkyHub\Model\Transformer\Api\Sales\Order\Status;
use B2W\SkyHub\Model\Transformer\Api\Sales\Order\Shipment;

/**
 * Class Order
 * @package B2W\SkyHub\Model\Transformer\Api\Sales
 */
class Order extends EntityAbstract
{
    /**
     * @var array
     */
    protected $_map = array(
        'customer'          => Customer::class,
        'shipping_address'  => Address::class,
        'billing_address'   => Address::class,
        'items'             => Item\Collection::class,
        'status'            => Status::class,
        'invoices'          => Invoice\Collection::class,
        'shipments'         => Shipment\Collection::class
    );

    /**
     * @return Entity|mixed
     */
    protected function _getEntityInstance()
    {
        return new Entity();
    }

    protected function _afterSetValue($entity, $attr, $value, $data)
    {
        switch ($attr) {
            case 'shipping_address' :
                $value->setType('shipping');
                $value->setAdditionalData('name', $data['customer']['name']);
                $value->setAdditionalData('email', $data['customer']['email']);
                break;
            case 'billing_address' :
                $value->setType('billing');
                $value->setAdditionalData('name', $data['customer']['name']);
                $value->setAdditionalData('email', $data['customer']['email']);
                break;
        }

        return parent::_afterSetValue($entity, $attr, $value, $data);
    }
}
