<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\SkyHub\Model\Repository;

use B2W\SkyHub\Contract\Entity\OrderEntityInterface;
use B2W\SkyHub\Contract\Repository\OrderDbRepositoryInterface;
use B2W\SkyHub\Model\Resource\Collection;
use B2W\SkyHub\Model\Resource\Select;
use B2W\SkyHub\Model\Transformer\Handler\Post;

/**
 * Class OrderDbRepository
 * @package B2W\SkyHub\Model\Repository
 */
class OrderDbRepository implements OrderDbRepositoryInterface
{
    /**
     * @param array $filters
     * @return \B2W\SkyHub\Contract\Resource\Collection|Collection
     * @throws \Exception
     */
    public function find($filters)
    {
        $defaultFilter = array(
            'post_type' => OrderEntityInterface::POST_TYPE
        );

        foreach ($filters as $k => $v) {
            $defaultFilter[$k] = $v;
        }

        $posts = get_posts($defaultFilter);

        $collection = new Collection();

        foreach ($posts as $post) {
            $order = $this->one($post);
            $collection->addItem($order);
        }

        return $collection;
    }

    /**
     * @param $post
     * @return \B2W\SkyHub\Model\Entity\OrderEntity|mixed|null
     * @throws \Exception
     */
    public function one($post)
    {
        if (!$post instanceof \WP_Post) {
            $post = get_post($post);
        }

        $order = new \B2W\SkyHub\Model\Entity\OrderEntity();

        if ($post->post_type != OrderEntityInterface::POST_TYPE) {
            return $order;
        }

        $transformer = new \B2W\SkyHub\Model\Transformer\Order\PostToEntity();
        $transformer->setPost($post);
        $order = $transformer->convert();

        return $order;
    }

    /**
     * @param OrderEntityInterface $order
     * @return $this|mixed
     * @throws \B2W\SkyHub\Exception\Data\TransformerNotFound
     * @throws \Exception
     */
    public function save(OrderEntityInterface $order)
    {
        global $wpdb;

        $validation = new \B2W\SkyHub\Model\Validation\OrderEntityValidator();
        $validation->validate($order);

        // begin transaction
        $wpdb->query('START TRANSACTION');

        $transformer = \App::transformer('order/entity_to_db');
        $transformer->setEntity($order);

        /** @var Post $post */
        $post = $transformer->convert();

        //check if exists order with same ID
        $select = new Select();
        $select->from('postmeta');
        $select->where("meta_key = '_order_key'");
        $select->where("meta_value = '{$post->data('_order_key')}'");

        $isNew = count($wpdb->get_results($select)) ? false : true;

        if (!$isNew) {
            $post->addData('ID', $wpdb->get_row($select)->post_id);
            /*** TODO CHECK WHAT TO UPDATE**/
            /** INVOICE */
            /** SHIPMENT */
        }

        //result = orderId when theres npo error
        $orderId = wp_insert_post($post->result(), true);

        if (is_wp_error($orderId)) {
            throw new \Exception($orderId->get_error_messages());
        }

        if ($isNew) {
            try {
                /** @var \B2W\SkyHub\Model\Entity\Order\ItemEntity $item */
                foreach ($order->getItems() as $item) {
                    $item->setOrderId($orderId);
                    $item->save();
                }
            } catch (\Exception $e) {
                $wpdb->query('ROLLBACK');
                throw $e;
            }
        }

        $wpdb->query('COMMIT');

        return $this;
    }
}
