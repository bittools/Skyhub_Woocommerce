<?php
/**
 * BSeller - B2W Companhia Digital
 *
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @copyright     Copyright (c) 2017 B2W Companhia Digital. (http://www.bseller.com.br/)
 * @author        Luiz Tucillo <luiz.tucillo@e-smart.com.br>
 */

namespace B2W\Skyhub\Model\Catalog\Product\Attribute\Repository;

use B2W\Skyhub\Model\Catalog\Product\Attribute\Entity;
use B2W\Skyhub\Model\Catalog\Product\Attribute\Collection;
use B2W\Skyhub\Model\Data\RepositoryAbstract;
use B2W\Skyhub\Model\Data\Select;

/**
 * Class Db
 * @package B2W\Skyhub\Model\Order\Repository
 */
class Db extends RepositoryAbstract implements \B2W\Skyhub\Contracts\Catalog\Product\Attribute\Repository
{
    /**
     * @param array $filters
     * @return \B2W\Skyhub\Contracts\Data\Collection|Collection
     */
    public function all($filters = array())
    {
        $results    = $this->_prepareArrayAttributes($this->_getSelect());
        $collection = new Collection();

        foreach ($results as $result) {
            $attr = $this->emptyOne();
            $attr->setId($result['id'])
                ->setCode($result['code'])
                ->setLabel($result['label']);

            if (isset($result['options'])) {
                foreach ($result['options'] as $opt) {
                    $option = new \B2W\Skyhub\Model\Catalog\Product\Attribute\Option\Entity();
                    $option->setId($opt['id'])
                        ->setCode($opt['code'])
                        ->setLabel($opt['label']);

                    $attr->addOption($option);
                }
            }

            $collection->addItem($attr);
        }

        return $collection;
    }

    /**
     * @param $id
     * @return Entity
     */
    public function one($id)
    {
        return $this->_getOne('main_table.attribute_id = %s', $id);
    }

    /**
     * @param $code
     * @return Entity|mixed
     */
    public function oneByCode($code)
    {
        return $this->_getOne('main_table.attribute_name = %s', $code);
    }

    protected function _getOne($where = null, $val = null)
    {
        global $wpdb;

        $select = $this->_getSelect();

        if (!empty($where)) {
            $select->where($where);
        }

        if (!empty($val)) {
            $select = $wpdb->prepare($select->prepare(), $val);
        }

        $results = current($this->_prepareArrayAttributes($select));

        $attr = $this->emptyOne();
        $attr->setId($results['id'])
            ->setCode($results['code'])
            ->setLabel($results['label']);

        if (isset($results['options'])) {
            foreach ($results['options'] as $opt) {
                $option = new \B2W\Skyhub\Model\Catalog\Product\Attribute\Option\Entity();
                $option->setId($opt['id'])
                    ->setCode($opt['code'])
                    ->setLabel($opt['label']);

                $attr->addOption($option);
            }
        }

        return $attr;
    }

    /**
     * @return Entity|mixed
     */
    public function emptyOne()
    {
        return new Entity();
    }

    /**
     * @return \B2W\Skyhub\Contracts\Data\Collection|Collection
     */
    public function emptyCollection()
    {
        return new Collection();
    }

    /**
     * @param $query
     * @return array
     */
    protected function _prepareArrayAttributes($query)
    {
        global $wpdb;

        $query = $query instanceof Select ? $query->prepare() : $query;

        $results    = $wpdb->get_results($query);
        $attributes = array();

        foreach ($results as $result) {

            if (!isset($attributes[$result->attribute_id])) {
                $attributes[$result->attribute_id] = array(
                    'id'        => $result->attribute_id,
                    'code'      => $result->attribute_name,
                    'label'     => $result->attribute_label,
                    'options'   => array()
                );
            }

            if ($result->term_id) {
                $attributes[$result->attribute_id]['options'][$result->term_id] = array(
                    'id'    => $result->term_id,
                    'code'  => $result->slug,
                    'label' => $result->name
                );
            }
        }

        return $attributes;
    }

    /**
     * @return Select
     */
    protected function _getSelect()
    {
        global $wpdb;

        $select = new Select();

        $select->addColumn(
            array(
                'attribute_id',
                'attribute_name',
                'attribute_label',
                'terms.term_id',
                'terms.name',
                'terms.slug'
            )
        );

        $select->from($wpdb->prefix . 'woocommerce_attribute_taxonomies', 'main_table');

        $select->join(
            $wpdb->prefix . 'term_taxonomy',
            "term_taxonomy.taxonomy = CONCAT('pa_', main_table.attribute_name)",
            'term_taxonomy',
            'left'
        );

        $select->join(
            $wpdb->prefix . 'terms',
            "terms.term_id = term_taxonomy.term_id",
            'terms',
            'left'
        );

        return $select;
    }


}
